Данная заметка нужна мне для защиты своего кода, так как многое тут я применял в первый раз и могу легко забыть


<---------------------------------------------------------------------------------------------------------------------->
Рисование графиков
AndroidView позволяет встроить View из старой системы в Compose
Для рисования графиков используем библиотеку MPAndroidChart

factory - это лямбда, которая создает View. Вызывается один раз
description.isEnabled = false - Отключаем описание
legend.isEnabled = false - Отключаем легенду
isDragEnabled = true - Включаем возможность перетаскивания

update - вызывается при каждом изменении `data` (рекомпозиции)
1. Преобразуем наши данные (List<Point>) в формат библиотеки (List<Entry>)
2. Создаем LineDataSet - это набор данных для одной линии на графике
    setDrawValues(false) - Не отображать значения над точками
    setDrawCircles(false) - Не рисовать круги в точках
3. Создаем LineData, которая содержит все наши LineDataSet (у нас он один)
4. Устанавливаем данные в график и обновляем его

<---------------------------------------------------------------------------------------------------------------------->
БПФ

Шаг 1: Подготовка данных сигнала
Количество точек ОБЯЗАНО быть степенью двойки для этого алгоритма БПФ. 2048, 4096, 8192 - хорошие значения.

Частота дискретизации (семплирования). По теореме Найквиста-Котельникова
она должна быть как минимум в 2 раза выше максимальной частоты в сигнале.
Возьмем с запасом, например, в 40 раз выше частоты нашего сигнала.

Создаем массив для сигнала

Шаг 2: Создание комплексного массива для БПФ
Действительная часть - наш сигнал, мнимая - ноль.

Шаг 3: Вычисление БПФ

Шаг 4 и 5: Обработка результата и формирование GraphData
Результат БПФ симметричен, поэтому нам нужна только первая половина (до N/2)

Ось X - это частота в Герцах.
Частота для k-го элемента спектра = k * (ЧастотаДискретизации / ОбщееЧислоТочек)

Ось Y - это амплитуда.
Вычисляем модуль комплексного числа и нормализуем его.
Делим на N и умножаем на 2 (т.к. мы отбросили вторую половину спектра).

По оси X показываем частоты до половины частоты дискретизации (частота Найквиста)
По оси Y - максимальная найденная амплитуда (с небольшим запасом)

<---------------------------------------------------------------------------------------------------------------------->
Асинхронность

viewModelScope.launch(Dispatchers.Default) {
    updateGraphData()
    updateSpectrumData()
}
